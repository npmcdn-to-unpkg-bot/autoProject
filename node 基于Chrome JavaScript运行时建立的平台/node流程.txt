键入 【express myapp】 (myapp是随意起的工程名称)


-----------------------------------------

在myapp下新建helloworld.js


var http = require("http");
http.createServer(function(request, response) {  
    response.writeHead(200, {"Content-Type": "text/plain"});  
    response.write("Hello World");  
    response.end();
}).listen(8888);
console.log("nodejs start listen 8888 port!");

------------------------------
进入node.js command prompt 命令窗口,进入C:\Program Files\nodejs\myapp目录

键入node helloworld.js

打开地址http://127.0.0.1:8888/

发现输出 :Hello World


注意：要在文件目录 ： cd C:\Program Files\nodejs\myapp



=============================================================

简单的说 Node.js 就是运行在服务端的 JavaScript。

Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。

Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，

V8引擎执行Javascript的速度非常快，性能非常好。



====================================
【脚本模式】

以下是我们的第一个Node.js程序：

console.log("Hello World");
保存该文件，文件名为 helloworld.js， 并通过 node命令来执行：

node helloworld.js
程序执行后，正常的话，就会在终端输出 Hello World。

【交互模式】

打开终端，键入node进入命令交互模式，可以输入一条代码语句后立即执行并显示结果，例如：

$ node
> console.log('Hello World!');
Hello World!


====================================================

【Node.js 创建HTTP服务器】

如果我们使用PHP来编写后端的代码时，需要Apache 或者 Nginx 的HTTP 服务器，并配上 mod_php5 模块和php-cgi。

从这个角度看，整个"接收 HTTP 请求并提供 Web 页面"的需求根本不需 要 PHP 来处理。

不过对 Node.js 来说，概念完全不一样了。

使用 Node.js 时，我们不仅仅 在实现一个应用，同时还实现了整个 HTTP 服务器。


事实上，我们的 Web 应用以及对应的 Web 服务器基本上是一样的。



=========================================================
【Node.js模块系统】

为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。

模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。

换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。

【创建模块】
在 Node.js 中，创建一个模块非常简单，如下我们创建一个 'main.js' 文件，代码如下:

var hello = require('./hello');
hello.world();
以上实例中，代码 require('./hello') 引入了当前目录下的hello.js文件（./ 为当前目录，node.js默认后缀为js）。

Node.js 提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。

接下来我们就来创建hello.js文件，代码如下：

exports.world = function() {
  console.log('Hello World');
}
在以上示例中，hello.js 通过 exports 对象把 world 作为模块的访 问接口，在 main.js 中通过 require('./hello') 加载这个模块，然后就可以直接访 问main.js 中 exports 对象的成员函数了。

有时候我们只是想把一个对象封装到模块中，格式如下：

module.exports = function() {
  // ...
}
例如:

//hello.js 
function Hello() { 
	varname; 
	this.setName = function(thyName) { 
		name = thyName; 
	}; 
	this.sayHello = function() { 
		console.log('Hello ' + name); 
	}; 
}; 
module.exports = Hello;
这样就可以直接获得这个对象了：

//main.js 
var Hello = require('./hello'); 
hello = new Hello(); 
hello.setName('BYVoid'); 
hello.sayHello(); 
模块接口的唯一变化是使用 module.exports = Hello 代替了exports.world = function(){}。 在外部引用该模块时，其接口对象就是要输出的 Hello 对象本身，而不是原先的 exports。

------------------------------------------------------

require方法接受以下几种参数的传递：

http、fs、path等，原生模块。

./mod或../mod，相对路径的文件模块。

/pathtomodule/mod，绝对路径的文件模块。

mod，非原生模块的文件模块。



====================================================
Node.js 模块系统

====================================================
Node.js 事件

====================================================
Node.js 函数

====================================================
Node.js 路由

====================================================
Node.js 全局对象

====================================================
Node.js 常用工具util

====================================================
Node.js 文件系统

====================================================
Node.js GET/POST请求
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================

====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================
====================================================






























































